package problem65;

import java.util.ArrayList;

/**
 * @author Cliff_Ford
 * 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
 * 路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
 * 如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 
 * 例如 a b c e 
 * 	  s f c s 
 * 	  a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，
 * 但是矩阵中不包含"abcb"路径，
 * 因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。
 */
public class Solution {
	
	public boolean hasPath(char[] matrix, int rows, int cols, char[] str){
		boolean isSelected[][] = new boolean[rows][cols];
		char matrixII[][] = new char[rows][cols];
		int startRow;
		int startCol;
		ArrayList<Integer> start = new ArrayList<>();
		ArrayList<ArrayList<Integer>> startPosition = new ArrayList<>();
		//将一维的matrix转为二维的matixII
		oneToTwo(martix, rows, cols, martixII);
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				if(matrix[i][j]==str[0]) {
					
				}
			}
		}
    }
	//一维数组转二维数组
	public void oneToTwo(char[] martix,int rows,int cols,char [][] martixII) {
		int index = 0;
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				martixII[i][j] = martix[index++];
			}
		}
	}

    
}

 