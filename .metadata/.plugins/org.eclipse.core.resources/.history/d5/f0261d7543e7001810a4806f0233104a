package problem04;

class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int x) { val = x; }
	public TreeNode() {	}
}

/**
 * @author Cliff_Ford
 * 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
 * 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
 * 例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
 */
public class Solution {
	public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
		
		if(pre.length == 0 || in.length == 0 || pre.length != in.length) {
			return null;
		}
		int num = pre.length;
		//根节点索引
		int rootIndex = 0;
		//建立根节点
		TreeNode treeNode = new TreeNode(pre[rootIndex]);
		//查找根节点的左子树的根节点的索引值
		int leftTreeNum = leftTreeHeadNode(pre,in,pre[rootIndex]);
		//构造左子树
		treeNode.left = reConstructBinaryTree(pre, in);
		
		return treeNode;
        
    }
	//左子树根节点的索引
	public int leftTreeHeadNode(int [] pre,int [] in,int root) {
		int index = pre.
		return result;
	}
	public int findRoot(int [] array,int target) {
		for(int i = 0; i < array.length; i++) {
			if(target == array[i]) {
				return i;
			}
		}
		return -1;
	}
}	