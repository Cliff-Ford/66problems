package problem29;

import java.util.ArrayList;
import java.util.PriorityQueue;

/**
 * @author Cliff_Ford
 * 输入n个整数，找出其中最小的K个数。
 * 例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。
 */
public class Solution {
	
	public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> result = new ArrayList<>();
        if(input.length == 0 || k == 0) {
        	return result;
        }
        if(k > input.length) {
        	return result;
        }
        quick_sort(input, 0, input.length-1);
        for(int i = 0; i < k; i++) {
        	result.add(input[i]);
        }
        return result;
    }
	public void quick_sort(int [] array,int start,int end) {
		int low = start;
		int high = end;
		int key = array[low];
		while(low<high) {
			while(low<high && array[high]>=key) {
				high--;
			}
			if(low<high) {
				int t = array[high];
				array[high] = array[low];
				array[low] = t;
				low++;
			}
			while(low<high && array[low]<=key) {
				low++;
			}
			if(low<high) {
				int t = array[high];
				array[high] = array[low];
				array[low] = t;
				high--;
			}
		}
		if(low>start) {
			quick_sort(array, 0, low-1);
		}
		if(high<end) {
			quick_sort(array, high+1, end);
		}
	}
	
	//堆排序写法
	public ArrayList<Integer> GetLeastNumbers_SolutionII(int[] input, int k) {
	       ArrayList<Integer> result = new ArrayList<Integer>();
	       int length = input.length;
	       if(k > length || k == 0){
	           return result;
	       }
	        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>();
	        for (int i = 0; i < length; i++) {
	            if (maxHeap.size() != k) {
	                maxHeap.offer(input[i]);
	            } else if (maxHeap.peek() > input[i]) {
	                Integer temp = maxHeap.poll();
	                temp = null;
	                maxHeap.offer(input[i]);
	            }
	        }
	        for (Integer integer : maxHeap) {
	            result.add(integer);
	        }
	        return result;
	    }
}

